// import { useState, useEffect } from "react";
// import { io } from "socket.io-client";
// import { FaCoins, FaChevronUp, FaChevronDown } from "react-icons/fa";
// import { RiLiveFill } from "react-icons/ri";
// import { useSelector } from "react-redux";
// import { UserData } from "../../Profile/types";
// import { WebSocket_URL } from "../../../Services/axiosInstance";
// import toast from "react-hot-toast";
// import { setUser } from "../../../features/userSlice";
// import { useDispatch } from "react-redux";

// interface Bet {
//   roundId: string;
//   choice: "up" | "down";
//   amount: number;
//   placedAt: Date;
//   result: "pending" | "win" | "lose";
//   payout?: number;
// }

// interface RoundHistory {
//   roundId: string;
//   result: "up" | "down";
//   totals: { up: number; down: number };
//   endedAt: Date;
// }

// const socket = io(WebSocket_URL);

// const ForexTradingApp = () => {
//   const dispatch = useDispatch();
//   const user = useSelector((state: any) => state.user);
//   const [userData, setUserData] = useState<UserData>(user);

//   const [connected, setConnected] = useState(false);
//   const [timeLeft, setTimeLeft] = useState(30);
//   const [betAmount, setBetAmount] = useState(10);
//   const [roundId, setRoundId] = useState("");
//   const [history, setHistory] = useState<RoundHistory[]>([]);
//   const [userBets, setUserBets] = useState<Bet[]>([]);
//   const [lastResult, setLastResult] = useState<{
//     win: boolean;
//     amount?: number;
//     side?: "up" | "down";
//   } | null>(null);
//   const [showHistory, setShowHistory] = useState(true);

//   const [isUserBeted, setIsUserBeted] = useState<Boolean>(false);
//   const [status, setStatus] = useState<String>("");

//   const [choice, setChoice] = useState<"up" | "down" | null>(null);

//   useEffect(() => {
//     console.log("we are going to register user", user?._id);
//     if (user?._id) {
//       socket.emit("registerUser", "updownGame"); // userId should be available after login
//     }
//   }, []);

//   // Initialize socket connection

//   useEffect(() => {
//     socket.on("currentRound", ({ roundId, startedAt }) => {
//       setIsUserBeted(false); // Reset user bet status for the new round
//       setRoundId(roundId);
//       startTimer(startedAt);
//     });

//     socket.on("joinedRound", ({ roundId }) => {
//       setStatus(`Joined Round ${roundId}`);
//     });

//     socket.on(
//       "roundOutcome",
//       ({ result, choice, winningSide, amount, message }) => {
//         console.log("Round outcome:", { result, choice, winningSide, amount });

//         setStatus(message); // show status message

//         // Optional toast notification
//         if (result === "win") {
//           toast.success(message);
//         } else {
//           toast.error(message);
//         }

//         // Reset UI if needed
//         // setLockedChoice(null); // or keep it locked for 2 seconds before reset
//         setIsUserBeted(false); // allow user to bet in the next round
//         // Optional: Fetch new balance from backend OR update balance here
//         if (result === "win") {
//           setUserData((prev: any) => {
//             const newBalance = prev.balance + amount;

//             const updatedUser = {
//               ...prev,
//               balance: newBalance,
//             };

//             // Update Redux store too
//             dispatch(setUser(updatedUser));

//             return updatedUser;
//           });
//         }
//       }
//     );

//     socket.on("newRound", ({ roundId, startedAt }) => {
//       console.log("new round started ");
//       setConnected(true);
//       setRoundId(roundId);
//       startTimer(startedAt);
//       setStatus("New round started! Place your bet!");
//     });

//     socket.on("betPlaced", ({ amount, choice }) => {

//       setStatus(`Bet placed: ₹${amount} on ${choice}`);
//     });

//     socket.on("balanceUpdate", ({ balance }) => {
//       setUserData((prev: any) => ({
//         ...prev,
//         balance,
//       }));
//       // dispatch(
//       //   setUser({
//       //     ...userData,
//       //     balance,
//       //   })
//       // );
//     });

//     socket.on("userRegistered", (roomName) => {
//       console.log("User registered in room", roomName);
//     });

//     socket.on("roundResultToAll", ({ room, roundId, result }) => {
//       console.log(`Room: ${room} → Round Result:`, roundId, result);
//     });

//     socket.on("error", (message) => {
//       toast.error(message);
//     });

//     // socket.on("wonMessage", ({ message, amount }: any) => {
//     //   console.log("wonMessage", message, amount);

//     //   setUserdata((prev: any) => ({
//     //     ...prev,
//     //     balance: prev.balance + amount,
//     //   }));
//     //   dispatch(
//     //     setUser({
//     //       ...userData,
//     //       balance: userData.balance,
//     //     })
//     //   );
//     // });

//     // socket.on("wonMessage", ({ message, amount }: any) => {
//     //   console.log("wonMessage", message, amount);

//     //   setUserdata((prev: any) => {
//     //     const newBalance = prev.balance + amount;

//     //     const updatedUser = {
//     //       ...prev,
//     //       balance: newBalance,
//     //     };

//     //     // Update Redux store too
//     //     dispatch(setUser(updatedUser));

//     //     return updatedUser;
//     //   });
//     // });

//     return () => {
//       socket.disconnect();
//     };
//   }, []);

//   const startTimer = (startedAt: string) => {
//     const end = new Date(startedAt).getTime() + 30000;
//     const interval = setInterval(() => {
//       const now = Date.now();
//       const left = Math.max(0, Math.floor((end - now) / 1000));
//       setTimeLeft(left);
//       if (left === 0) clearInterval(interval);
//     }, 1000);
//   };

//   const placeBet = (c: "up" | "down") => {
//     const amount = Number(betAmount);
//     if (!c) return setStatus("Select up or down first");
//     if (isNaN(amount) || amount <= 0)
//       return setStatus("Enter valid bet amount");
//     if (userData.balance < amount) return setStatus("Insufficient balance");

//     if (isUserBeted) {
//       toast.error("You already placed a bet in this round", {
//         duration: 5000,
//       });
//       return;
//     }

//     setUserData((prev: any) => ({
//       ...prev,
//       balance: prev.balance - amount,
//     }));

//     socket.emit("placeBet", {
//       userId: userData._id,
//       choice:c,
//       amount,
//       roundId,
//     });

//     setIsUserBeted(true); // ✅ Set this AFTER placing the bet
//     setBetAmount(10); // Reset bet amount after placing the bet
//   };

//   // Candlestick chart component
//   const Candlestick = ({
//     item,
//     index,
//   }: {
//     item: RoundHistory;
//     index: number;
//   }) => {
//     const total = item.totals.up + item.totals.down;
//     const upPercent = total > 0 ? (item.totals.up / total) * 100 : 50;
//     const downPercent = 100 - upPercent;

//     return (
//       <div key={index} className="flex flex-col items-center mx-1">
//         <div className="relative h-24 w-6">
//           {/* Wick */}
//           <div
//             className={`absolute left-1/2 w-0.5 h-full ${
//               item.result === "up" ? "bg-green-500" : "bg-red-500"
//             }`}
//           ></div>

//           {/* Body */}
//           <div
//             className="absolute bottom-0 w-full"
//             style={{ height: `${downPercent}%` }}
//           >
//             <div
//               className={`w-full h-full ${
//                 item.result === "up" ? "bg-green-300" : "bg-red-300"
//               }`}
//             ></div>
//           </div>
//           <div
//             className="absolute top-0 w-full"
//             style={{ height: `${upPercent}%` }}
//           >
//             <div
//               className={`w-full h-full ${
//                 item.result === "up" ? "bg-green-500" : "bg-red-500"
//               }`}
//             ></div>
//           </div>
//         </div>
//         <div className="text-xs mt-1 text-center">
//           <div>{ }</div>
//           <div
//             className={`font-bold ${
//               item.result === "up" ? "text-green-400" : "text-red-400"
//             }`}
//           >
//             {item.result.toUpperCase()}
//           </div>
//         </div>
//       </div>
//     );
//   };

//   return (
//     <div className="p-4 max-w-md mx-auto bg-gray-900 text-white min-h-screen">
//       {/* User Profile uper */}
//       <div className="flex justify-between items-center mb-4 p-3 bg-gray-800 rounded-lg">
//         <div className="flex items-center">
//           <img
//             src={userData.profilePic || "https://via.placeholder.com/40"}
//             alt="Profile"
//             className="w-10 h-10 rounded-full mr-3 border-2 border-blue-500"
//           />
//           <div>
//             <div className="font-bold">{userData.username}</div>
//             <div className="flex items-center text-sm">
//               <FaCoins className="text-yellow-400 mr-1" />
//               <span>₹{userData.balance.toFixed(2)}</span>
//             </div>
//           </div>
//         </div>
//         <div
//           className={`flex items-center px-2 py-1 rounded ${
//             connected ? "bg-green-500" : "bg-red-500"
//           }`}
//         >
//           {connected && <RiLiveFill className="mr-1" />}
//           {connected ? "LIVE" : "OFFLINE"}
//         </div>
//       </div>

//       {/* Current Round Summary */}
//       <div className="mb-4 p-4 rounded-lg bg-gray-800 flex gap-2 flex-col">
//         <div className="flex justify-between items-center mb-2">
//           <span className="text-gray-300">Round #{roundId || "----"}</span>
//           <span className="font-mono text-xl bg-gray-700 px-3 py-1 rounded">
//             <p
//               className={`font-bold ${
//                 timeLeft < 10 ? "text-red-400" : "text-yellow-400"
//               }`}
//             >
//               {timeLeft}s
//             </p>
//           </span>
//         </div>
//         <div className="text-center">{status}</div>
//       </div>

//       {/* Betting Controls */}
//       <div className="mb-4">
//         <label className="block mb-2 text-gray-300">Bet Amount (₹)</label>
//         <div className="flex mb-2">
//           <input
//             type="number"
//             value={betAmount}
//             onChange={(e) =>
//               setBetAmount(Math.max(1, parseFloat(e.target.value) || 1))
//             }
//             className="w-full p-3 rounded-l bg-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
//             min="1"
//             step="1"
//           />
//           <button
//             onClick={() => setBetAmount(Math.floor(userData.balance))}
//             className="bg-blue-600 px-4 rounded-r hover:bg-blue-500 transition-colors"
//           >
//             MAX
//           </button>
//         </div>
//         <div className="grid grid-cols-4 gap-2">
//           {[10, 50, 100, 500].map((amount) => (
//             <button
//               key={amount}
//               onClick={() => setBetAmount(amount)}
//               className={`p-2 rounded transition-colors ${
//                 betAmount === amount
//                   ? "bg-blue-600"
//                   : "bg-gray-700 hover:bg-gray-600"
//               }`}
//             >
//               ₹{amount}
//             </button>
//           ))}
//         </div>
//       </div>

//       <div className="grid grid-cols-2 gap-4 mb-6">
//         <button
//           onClick={() => placeBet("up")}
//           disabled={!connected || userData.balance < betAmount || timeLeft < 5}
//           className={`p-4 rounded-lg font-bold flex flex-col items-center transition-all ${
//             !connected || userData.balance < betAmount || timeLeft < 5
//               ? "bg-gray-600 cursor-not-allowed opacity-70"
//               : "bg-green-600 hover:bg-green-500"
//           }`}
//         >
//           <FaChevronUp size={24} />
//           <span>BET UP</span>
//         </button>
//         <button
//           onClick={() => {
//             placeBet("down");
//           }}
//           disabled={!connected || userData.balance < betAmount || timeLeft < 5}
//           className={`p-4 rounded-lg font-bold flex flex-col items-center transition-all ${
//             !connected || userData.balance < betAmount || timeLeft < 5
//               ? "bg-gray-600 cursor-not-allowed opacity-70"
//               : "bg-red-600 hover:bg-red-500"
//           }`}
//         >
//           <FaChevronDown size={24} />
//           <span>BET DOWN</span>
//         </button>
//       </div>

//       {/* Result Notification */}
//       {lastResult && (
//         <div
//           className={`mb-4 p-3 rounded-lg text-center text-white font-bold ${
//             lastResult.win ? "bg-green-600" : "bg-red-600"
//           }`}
//         >
//           {lastResult.win ? (
//             <span>
//               🎉 You won ₹{lastResult.amount?.toFixed(2)}!{" "}
//               {lastResult.side?.toUpperCase()} was correct
//             </span>
//           ) : (
//             <span>😢 You lost! {lastResult.side?.toUpperCase()} won</span>
//           )}
//         </div>
//       )}

//       {/* History Section */}
//       <div className="mb-4">
//         <div
//           className="flex justify-between items-center p-3 bg-gray-800 rounded-t-lg cursor-pointer"
//           onClick={() => setShowHistory(!showHistory)}
//         >
//           <h2 className="text-lg font-semibold">Round History</h2>
//           {showHistory ? <FaChevronUp /> : <FaChevronDown />}
//         </div>

//         {showHistory && (
//           <div className="p-4 bg-gray-800 rounded-b-lg">
//             {history.length === 0 ? (
//               <p className="text-center text-gray-400 py-4">
//                 No history available
//               </p>
//             ) : (
//               <div className="flex overflow-x-auto pb-4">
//                 {history
//                   .slice()
//                   .reverse()
//                   .map((item, index) => (
//                     <Candlestick key={index} item={item} index={index} />
//                   ))}
//               </div>
//             )}

//             {/* User Bet History */}
//             {userBets.length > 0 && (
//               <div className="mt-4">
//                 <h3 className="text-center mb-3 font-semibold border-b pb-2">
//                   Your Recent Bets
//                 </h3>
//                 <div className="space-y-2 max-h-60 overflow-y-auto">
//                   {userBets
//                     .slice()
//                     .reverse()
//                     .map((bet, index) => (
//                       <div
//                         key={index}
//                         className={`flex justify-between items-center p-3 rounded ${
//                           bet.result === "win"
//                             ? "bg-green-900 bg-opacity-50"
//                             : bet.result === "lose"
//                             ? "bg-red-900 bg-opacity-50"
//                             : "bg-gray-700"
//                         }`}
//                       >
//                         <div className="flex items-center">
//                           <div
//                             className={`w-3 h-3 rounded-full mr-2 ${
//                               bet.choice === "up"
//                                 ? "bg-green-500"
//                                 : "bg-red-500"
//                             }`}
//                           ></div>
//                           <span className="font-medium">
//                             {bet.choice.toUpperCase()}
//                           </span>
//                         </div>
//                         <div className="text-sm">₹{bet.amount.toFixed(2)}</div>
//                         <div className="text-sm">
//                           {bet.result === "win" && (
//                             <span className="text-green-400">
//                               +₹{bet.payout?.toFixed(2)}
//                             </span>
//                           )}
//                           {bet.result === "lose" && (
//                             <span className="text-red-400">Lost</span>
//                           )}
//                           {bet.result === "pending" && (
//                             <span className="text-yellow-400">Pending</span>
//                           )}
//                         </div>
//                       </div>
//                     ))}
//                 </div>
//               </div>
//             )}
//           </div>
//         )}
//       </div>
//     </div>
//   );
// };

// export default ForexTradingApp;





import { useState, useEffect, useCallback } from "react";
import { io } from "socket.io-client";
import { FaCoins, FaChevronUp, FaChevronDown } from "react-icons/fa";
import { RiLiveFill } from "react-icons/ri";
import { useSelector } from "react-redux";
import toast from "react-hot-toast";
import { useDispatch } from "react-redux";
import { setUser } from "../../../features/userSlice";
import { WebSocket_URL } from "../../../Services/axiosInstance";

const ROUND_DURATION = 30000; // 30 seconds

const ForexTradingApp = () => {
  const dispatch = useDispatch();
  const user = useSelector((state) => state.user);
  const [userData, setUserData] = useState(user);
  const [socket, setSocket] = useState(null);
  const [connected, setConnected] = useState(false);
  const [timeLeft, setTimeLeft] = useState(0);
  const [betAmount, setBetAmount] = useState(10);
  const [roundId, setRoundId] = useState("");
  const [history, setHistory] = useState([]);
  const [hasBet, setHasBet] = useState(false);
  const [status, setStatus] = useState("Connecting...");

  // Initialize socket connection
  useEffect(() => {
    const newSocket = io(WebSocket_URL);
    setSocket(newSocket);

    return () => {
      newSocket.disconnect();
    };
  }, []);

  // Set up socket events
  useEffect(() => {
    if (!socket || !user?._id) return;

    const onGameState = (data:any) => {
      setRoundId(data.currentRound.roundId);
      setTimeLeft(Math.floor(data.currentRound.timeLeft / 1000));
      setHistory(data.history || []);
      setConnected(true);
      setStatus("Place your bet!");
    };

    const onNewRound = (data:any) => {
      setRoundId(data.roundId);
      setTimeLeft(Math.floor(ROUND_DURATION / 1000));
      setHasBet(false);
      setStatus("New round started! Place your bet!");
      setHistory(data.history || []);
    };

    const onRoundOutcome = ({ result, amount, message }:any) => {
      setStatus(message);
      toast[result === "win" ? "success" : "error"](message);
      
      if (result === "win") {
        setUserData(prev  => ({
          ...prev,
          balance: prev.balance + amount
        }));
        dispatch(setUser({
          ...userData,
          balance: userData.balance + amount
        }));
      }
    };

    const onBetPlaced = ({ amount, choice }:any) => {
      setHasBet(true);
      setStatus(`Bet placed: ₹${amount} on ${choice}`);
    };

    const onBalanceUpdate = ({ balance }:any) => {
      setUserData(prev => ({ ...prev, balance }));
      dispatch(setUser({ ...userData, balance }));
    };

    const onError = (message) => {
      toast.error(message);
      setStatus(message);
    };

    socket.on("gameState", onGameState);
    socket.on("newRound", onNewRound);
    socket.on("roundOutcome", onRoundOutcome);
    socket.on("betPlaced", onBetPlaced);
    socket.on("balanceUpdate", onBalanceUpdate);
    socket.on("error", onError);

    // Register user
    socket.emit("registerUser", user._id);

    return () => {
      if (socket) {
        socket.off("gameState", onGameState);
        socket.off("newRound", onNewRound);
        socket.off("roundOutcome", onRoundOutcome);
        socket.off("betPlaced", onBetPlaced);
        socket.off("balanceUpdate", onBalanceUpdate);
        socket.off("error", onError);
      }
    };
  }, [socket, user?._id]);

  // Countdown timer
  useEffect(() => {
    if (timeLeft <= 0) return;

    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          clearInterval(timer);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [timeLeft]);

  const placeBet = useCallback((choice) => {
    if (!socket || !userData?._id) return;
    if (hasBet) return toast.error("You already bet this round");
    if (timeLeft < 5) return toast.error("Round is ending soon");
    if (betAmount < 1) return toast.error("Invalid bet amount");
    if (userData.balance < betAmount) return toast.error("Insufficient balance");

    socket.emit("placeBet", {
      userId: userData._id,
      choice,
      amount: betAmount
    });
  }, [socket, userData, betAmount, hasBet, timeLeft]);

  // Quick bet amount buttons
  const quickBets = [10, 50, 100, 500];
  
  // Candlestick chart component
  const Candlestick = ({ item }:any) => {
    const total = item.totals.up + item.totals.down;
    const upPercent = total > 0 ? (item.totals.up / total) * 100 : 50;
    
    return (
      <div className="flex flex-col items-center mx-1">
        <div className="relative h-24 w-6">
          <div className={`absolute left-1/2 w-0.5 h-full ${
            item.result === "up" ? "bg-green-500" : "bg-red-500"
          }`}></div>
          <div className="absolute bottom-0 w-full" style={{ height: `${100-upPercent}%` }}>
            <div className={`w-full h-full ${
              item.result === "up" ? "bg-green-300" : "bg-red-300"
            }`}></div>
          </div>
          <div className="absolute top-0 w-full" style={{ height: `${upPercent}%` }}>
            <div className={`w-full h-full ${
              item.result === "up" ? "bg-green-500" : "bg-red-500"
            }`}></div>
          </div>
        </div>
        <div className={`text-xs mt-1 font-bold ${
          item.result === "up" ? "text-green-400" : "text-red-400"
        }`}>
          {item.result.toUpperCase()}
        </div>
      </div>
    );
  };

  return (
    <div className="p-4 max-w-md mx-auto bg-gray-900 text-white min-h-screen">
      {/* User Profile */}
      <div className="flex justify-between items-center mb-4 p-3 bg-gray-800 rounded-lg">
        <div className="flex items-center">
          <img
            src={userData.profilePic || "/default-avatar.png"}
            alt="Profile"
            className="w-10 h-10 rounded-full mr-3 border-2 border-blue-500"
          />
          <div>
            <div className="font-bold">{userData.username}</div>
            <div className="flex items-center text-sm">
              <FaCoins className="text-yellow-400 mr-1" />
              <span>₹{userData.balance?.toFixed(2) || '0.00'}</span>
            </div>
          </div>
        </div>
        <div className={`flex items-center px-2 py-1 rounded ${
          connected ? "bg-green-500" : "bg-red-500"
        }`}>
          {connected && <RiLiveFill className="mr-1" />}
          {connected ? "LIVE" : "OFFLINE"}
        </div>
      </div>

      {/* Current Round */}
      <div className="mb-4 p-4 rounded-lg bg-gray-800">
        <div className="flex justify-between items-center mb-2">
          <span className="text-gray-300">Round #{roundId || "----"}</span>
          <span className={`font-mono text-xl ${
            timeLeft < 10 ? "text-red-400" : "text-yellow-400"
          }`}>
            {timeLeft}s
          </span>
        </div>
        <div className="text-center text-sm text-gray-300">{status}</div>
      </div>

      {/* Betting Controls */}
      <div className="mb-4">
        <label className="block mb-2 text-gray-300">Bet Amount (₹)</label>
        <div className="flex mb-2">
          <input
            type="number"
            value={betAmount}
            onChange={(e) => setBetAmount(Math.max(1, Number(e.target.value) || 1))}
            className="w-full p-3 rounded-l bg-gray-700 focus:outline-none"
            min="1"
          />
          <button
            onClick={() => setBetAmount(Math.floor(userData.balance))}
            className="bg-blue-600 px-4 rounded-r hover:bg-blue-500"
          >
            MAX
          </button>
        </div>
        <div className="grid grid-cols-4 gap-2 mb-4">
          {quickBets.map(amount => (
            <button
              key={amount}
              onClick={() => setBetAmount(amount)}
              className={`p-2 rounded ${
                betAmount === amount ? "bg-blue-600" : "bg-gray-700"
              }`}
            >
              ₹{amount}
            </button>
          ))}
        </div>

        <div className="grid grid-cols-2 gap-4">
          <button
            onClick={() => placeBet("up")}
            disabled={!connected || hasBet || userData.balance < betAmount || timeLeft < 5}
            className={`p-4 rounded-lg flex flex-col items-center ${
              !connected || hasBet || userData.balance < betAmount || timeLeft < 5
                ? "bg-gray-600 cursor-not-allowed"
                : "bg-green-600 hover:bg-green-500"
            }`}
          >
            <FaChevronUp size={24} />
            <span>BET UP</span>
          </button>
          <button
            onClick={() => placeBet("down")}
            disabled={!connected || hasBet || userData.balance < betAmount || timeLeft < 5}
            className={`p-4 rounded-lg flex flex-col items-center ${
              !connected || hasBet || userData.balance < betAmount || timeLeft < 5
                ? "bg-gray-600 cursor-not-allowed"
                : "bg-red-600 hover:bg-red-500"
            }`}
          >
            <FaChevronDown size={24} />
            <span>BET DOWN</span>
          </button>
        </div>
      </div>

      {/* History Section */}
      <div className="mb-4 bg-gray-800 rounded-lg overflow-hidden">
        <div className="p-3 bg-gray-800">
          <h2 className="text-lg font-semibold">Recent Rounds</h2>
        </div>
        <div className="p-4">
          {history.length > 0 ? (
            <div className="flex overflow-x-auto pb-2">
              {history.map((item, i) => (
                <Candlestick key={i} item={item} />
              ))}
            </div>
          ) : (
            <p className="text-center text-gray-400 py-4">No history yet</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default ForexTradingApp;