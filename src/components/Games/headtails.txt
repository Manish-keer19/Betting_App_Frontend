

import { useEffect, useRef, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import io, { Socket } from "socket.io-client";
import { TfiReload } from "react-icons/tfi";
import { toast } from "sonner";
import { userService } from "../../Services/userService";
import { setUser } from "../../features/userSlice";
import Navbar from "../Navbar";
import { WebSocket_URL } from "../../Services/axiosInstance";
import { Howl } from "howler";
import countdownSound from "../../assets/music/count.mp3";
import coinFlipSound from "../../assets/music/coin-flip.mp3";
import winSound from "../../assets/music/win.mp3";
import loseSound from "../../assets/music/lose.mp3";
import { motion, AnimatePresence } from "framer-motion";

const socket = io(WebSocket_URL);

export default function HeadTailGame() {
  // Sound effects
  const [sounds] = useState(() => ({
    countdown: new Howl({ src: [countdownSound], volume: 0.5 }),
    coinFlip: new Howl({ src: [coinFlipSound], volume: 0.7 }),
    win: new Howl({ src: [winSound], volume: 0.6 }),
    lose: new Howl({ src: [loseSound], volume: 0.6 })
  }));

  const dispatch = useDispatch();
  const userData = useSelector((state: any) => state.user);

  // Game state
  const [roundId, setRoundId] = useState("");
  const [choice, setChoice] = useState<"head" | "tail" | null>(null);
  const [betAmount, setBetAmount] = useState<number>(10);
  const [timeLeft, setTimeLeft] = useState(30);
  const [status, setStatus] = useState("Connecting to game...");
  const [resultHistory, setResultHistory] = useState<Array<{ roundId: string; result: string }>>([]);
  const [user, setUserdata] = useState(userData);
  const [isUserBeted, setIsUserBeted] = useState<boolean>(false);
  const [userHistory, setUserHistory] = useState<any[]>([]);
  const [coinFlip, setCoinFlip] = useState<{ flipping: boolean; result: string | null }>({ flipping: false, result: null });
  const [lastWinAmount, setLastWinAmount] = useState<number | null>(null);

  // Refs
  const timerIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const serverTimeOffsetRef = useRef(0);
  const lastSyncRef = useRef(0);
  const betButtonRef = useRef<HTMLButtonElement>(null);

  // Color theme
  const colors = {
    bg: "bg-gray-900",
    card: "bg-gray-800/80 backdrop-blur-sm",
    text: "text-white",
    button: "bg-gray-700 hover:bg-gray-600",
    border: "border-gray-700",
    activeHead: "bg-gradient-to-br from-blue-500 to-blue-700 text-white",
    activeTail: "bg-gradient-to-br from-amber-500 to-amber-700 text-white",
    highlight: "text-yellow-400",
    input: "bg-gray-700 text-white placeholder-gray-400 border border-gray-600",
    win: "bg-green-500/20 border-green-500/30",
    lose: "bg-red-500/20 border-red-500/30"
  };

  // Handle countdown sound
  useEffect(() => {
    if (timeLeft <= 5 && timeLeft > 0) {
      sounds.countdown.stop();
      sounds.countdown.play();
    }

    if (timeLeft === 0) {
      sounds.countdown.stop();
    }

    return () => {
      sounds.countdown.stop();
    };
  }, [timeLeft, sounds.countdown]);


  useEffect(() => {
  const socket = io(WebSocket_URL); // Create socket inside useEffect

  socket.on("connect", () => {
    console.log("Socket connected");
  });

  // Add other event listeners...

  return () => {
    socket.disconnect(); // Proper cleanup
  };
}, []); // Empty dependency array = runs once


 const socketRef = useRef<Socket | null>(null);

useEffect(() => {
  if (!socketRef.current) {
    socketRef.current = io(WebSocket_URL);
  }

  const socket = socketRef.current;


    const handleCurrentRound = ({ roundId, startedAt, roundHistory }: any) => {
      setIsUserBeted(false);
      setRoundId(roundId);
      startTimer(startedAt);
      setResultHistory(roundHistory || []);
      setStatus("Place your bet! Time is ticking...");
      setCoinFlip({ flipping: false, result: null });
    };

    const handleRoundOutcome = ({ result, choice, amount, message }: any) => {
      setStatus(message);
      
      // Play win/lose sound
      if (result === "win") {
        sounds.win.play();
        setLastWinAmount(amount);
        setTimeout(() => setLastWinAmount(null), 3000);
      } else {
        sounds.lose.play();
      }

      setIsUserBeted(false);
      
      if (result === "win") {
        setUserdata((prev: any) => {
          const newBalance = prev.balance + amount;
          const updatedUser = { ...prev, balance: newBalance };
          dispatch(setUser(updatedUser));
          return updatedUser;
        });

        setUserHistory((prev) => [{
          _id: `${Date.now()}`,
          choice,
          amount,
          result,
          payout: amount,
          createdAt: new Date().toISOString(),
        }, ...prev]);
      } else {
        setUserHistory((prev) => [{
          _id: `${Date.now()}`,
          choice,
          amount,
          result,
          payout: 0,
          createdAt: new Date().toISOString(),
        }, ...prev]);
      }
    };

    const handleNewRound = ({ roundId, startedAt }: any) => {
      setRoundId(roundId);
      startTimer(startedAt);
      setStatus("New round started! Place your bet!");
      setIsUserBeted(false);
      setChoice(null);
      setCoinFlip({ flipping: false, result: null });
    };

    const handleRoundResult = ({ result }: any) => {
      setCoinFlip({ flipping: true, result: null });
      sounds.coinFlip.play();
      
      setTimeout(() => {
        setCoinFlip({ flipping: false, result });
      }, 2000);
    };

    const handleBalanceUpdate = ({ balance }: any) => {
      setUserdata((prev: any) => ({ ...prev, balance }));
      dispatch(setUser({ ...userData, balance }));
    };

    // Socket event listeners
    // socket.on("currentRound", handleCurrentRound);
    // socket.on("roundOutcome", handleRoundOutcome);
    // socket.on("newRound", handleNewRound);
    // socket.on("roundResult", handleRoundResult);
    // socket.on("balanceUpdate", handleBalanceUpdate);
    // socket.on("error", (message) => setStatus(`Error: ${message}`));

    // Socket event listeners
    socketRef.current.on("currentRound", handleCurrentRound);
    socketRef.current.on("roundOutcome", handleRoundOutcome);
    socketRef.current.on("newRound", handleNewRound);
    socketRef.current.on("roundResult", handleRoundResult);
    socketRef.current.on("balanceUpdate", handleBalanceUpdate);
    socketRef.current.on("error", (message) => setStatus(`Error: ${message}`));

    // Register user with socket
    if (userData?._id) {
      socket.emit("registerUser", "headTailGame");
      fetchUserHistory();
    }

     return () => {
    if (socketRef.current) {
      socketRef.current.disconnect();
      socketRef.current = null;
    }
  };
}, []);

  // Timer function with server sync
  const startTimer = (startedAt: string) => {
    if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);

    const calculateRemaining = () => {
      const serverNow = Date.now() + serverTimeOffsetRef.current;
      const roundEnd = new Date(startedAt).getTime() + 30000;
      return Math.max(0, Math.floor((roundEnd - serverNow) / 1000));
    };

    const syncWithServer = () => {
      const now = Date.now();
      socket.emit("getServerTime", {}, (serverTime: number) => {
        const roundTripTime = Date.now() - now;
        serverTimeOffsetRef.current = serverTime - Date.now() + roundTripTime / 2;
        lastSyncRef.current = Date.now();
        setTimeLeft(calculateRemaining());
      });
    };

    syncWithServer();

    let expected = Date.now() + 1000;
    const driftCorrection = (now: number) => {
      const drift = now - expected;
      expected += 1000;
      return Math.max(0, 1000 - drift);
    };

    timerIntervalRef.current = setInterval(() => {
      const now = Date.now();

      if (now - lastSyncRef.current > 30000 || Math.abs(serverTimeOffsetRef.current) > 1000) {
        syncWithServer();
      }

      setTimeLeft(calculateRemaining());

      const nextTick = driftCorrection(now);
      if (timerIntervalRef.current) {
        clearInterval(timerIntervalRef.current);
        timerIntervalRef.current = setTimeout(() => startTimer(startedAt), nextTick);
      }
    }, 1000);

    return () => {
      if (timerIntervalRef.current) clearInterval(timerIntervalRef.current);
    };
  };

  const handleChoice = (c: "head" | "tail") => {
    setChoice(c);
    // Add subtle feedback when selecting
    if (betButtonRef.current) {
      betButtonRef.current.classList.add("scale-95");
      setTimeout(() => {
        if (betButtonRef.current) betButtonRef.current.classList.remove("scale-95");
      }, 100);
    }
  };

  const placeBet = () => {
    const amount = Number(betAmount);
    if (!choice) return setStatus("Select Head or Tail first");
    if (isNaN(amount) || amount <= 0) return setStatus("Enter valid bet amount");
    if (userData.balance < amount) return setStatus("Insufficient balance");
    if (isUserBeted) return toast.error("You already placed a bet in this round");

    // Visual feedback
    if (betButtonRef.current) {
      betButtonRef.current.classList.add("animate-pulse");
      setTimeout(() => {
        if (betButtonRef.current) betButtonRef.current.classList.remove("animate-pulse");
      }, 500);
    }

    setUserdata((prev: any) => ({ ...prev, balance: prev.balance - amount }));
    socket.emit("placeBet", { userId: userData._id, choice, amount, roundId });
    setIsUserBeted(true);
    setStatus(`Bet placed: ₹${amount} on ${choice}`);
    toast.success(`Bet placed: ₹${amount} on ${choice}`);
  };

  const fetchUserHistory = async () => {
    try {
      const token = userData.token;
      if (!token) return toast.error("Token not found");
      const response = await userService.getUserBetHistoryHeadTail(token);
      setUserHistory(response.data);
    } catch (error) {
      console.error("Failed to fetch user history:", error);
      toast.error("Failed to load history");
    }
  };
  useEffect(() => {
  console.log("Coin flip state updated:", coinFlip);
}, [coinFlip]);

  const getUserBalance = async () => {
    try {
      if (!user?.token) return toast.error("Token not found");
      const res = await userService.getUserBalance(user.token);
      if (res?.success) {
        setUserdata((prev: any) => ({ ...prev, balance: res.data.balance }));
        dispatch(setUser({ ...user, balance: res.data.balance, token: user.token || "" }));
      } else toast.error(res?.message || "Failed to fetch balance");
    } catch (error) {
      console.error("Balance error:", error);
      toast.error("Error fetching balance");
    }
  };

  // Quick bet amount buttons
  const quickBets = [10, 50, 100, 500, 1000];
  const handleQuickBet = (amount: number) => {
    setBetAmount(amount);
    toast.info(`Bet amount set to ₹${amount}`);
  };

  return (
    <>
      <Navbar />
      <div className={`min-h-screen ${colors.bg} ${colors.text} p-4 pt-24 md:pt-28`}>
        {/* Floating win notification */}
        {/* <AnimatePresence>
          {lastWinAmount && (
            <motion.div
              initial={{ opacity: 0, y: -50, scale: 0.8 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: -50, scale: 0.8 }}
              className="fixed top-20 left-0 right-0 z-50 flex justify-center"
            >
              <div className="bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 rounded-full shadow-lg font-bold animate-bounce">
                YOU WON ₹{lastWinAmount}!
              </div>
            </motion.div>
          )}
        </AnimatePresence> */}


        {/* Replace the existing coin flip section with this */}
<AnimatePresence>
  {coinFlip.flipping ? (
    <motion.div
      key="flipping-coin"
      initial={{ rotateY: 0, opacity: 0 }}
      animate={{ rotateY: 360, opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5, repeat: 3, ease: "easeInOut" }}
      className="w-16 h-16 mx-auto my-4 rounded-full bg-gradient-to-br from-yellow-400 to-yellow-600 flex items-center justify-center text-black font-bold text-xl shadow-lg"
    >
      ?
    </motion.div>
  ) : coinFlip.result ? (
    <motion.div
      key="result-coin"
      initial={{ scale: 0.8, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      className={`w-16 h-16 mx-auto my-4 rounded-full flex items-center justify-center font-bold text-xl shadow-lg ${
        coinFlip.result === "head" 
          ? "bg-blue-600 text-white" 
          : "bg-amber-600 text-white"
      }`}
    >
      {coinFlip.result === "head" ? "H" : "T"}
    </motion.div>
  ) : null}
</AnimatePresence>

        <div className="max-w-md mx-auto">
          {/* Header */}
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-2xl font-bold text-yellow-400 flex items-center gap-2">
              <span className="bg-yellow-500 text-black px-2 py-1 rounded">HEAD</span>
              <span className="text-white">OR</span>
              <span className="bg-amber-600 text-white px-2 py-1 rounded">TAIL</span>
            </h1>
            <div className="flex items-center gap-2 bg-gray-800 px-3 py-1 rounded-full">
              <span className="text-sm font-medium">
                ₹{typeof userData.balance === "number" ? userData.balance.toFixed(2) : "0.00"}
              </span>
              <TfiReload
                onClick={getUserBalance}
                className="text-yellow-400 cursor-pointer hover:rotate-180 transition-transform"
                size={16}
              />
            </div>
          </div>

          {/* User Profile */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className={`flex items-center gap-3 p-3 rounded-lg ${colors.card} mb-4 shadow-lg`}
          >
            <div className="relative">
              <img
                src={userData.profilePic || "/default-avatar.png"}
                className="w-12 h-12 rounded-full border-2 border-yellow-400 object-cover"
                alt="Avatar"
              />
              {userData.isVIP && (
                <div className="absolute -bottom-1 -right-1 bg-purple-600 text-white text-xs px-1 rounded-full">
                  VIP
                </div>
              )}
            </div>
            <div>
              <p className="font-medium">{userData.username}</p>
              <p className="text-xs text-gray-400">{userData.email}</p>
            </div>
          </motion.div>

          {/* Game Info */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className={`p-4 rounded-lg ${colors.card} mb-4 shadow-lg`}
          >
            <div className="grid grid-cols-2 gap-3 mb-3">
              <div>
                <p className="text-xs text-gray-400">Round ID</p>
                <p className="font-medium text-sm truncate bg-gray-700 px-2 py-1 rounded">
                  #{roundId.slice(0, 8)}
                </p>
              </div>
              <div>
                <p className="text-xs text-gray-400">Time Left</p>
                <div className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full ${timeLeft <= 5 ? "bg-red-500 animate-pulse" : "bg-green-500"}`}></div>
                  <p className={`font-bold ${timeLeft <= 5 ? "text-red-400" : "text-yellow-400"}`}>
                    {timeLeft}s
                  </p>
                </div>
              </div>
            </div>

            <div className={`p-3 rounded ${colors.input} text-center mb-3`}>
              <p className="text-sm truncate font-medium">
                {status || "Waiting for round..."}
              </p>
            </div>

            {/* Coin flip animation */}
            <AnimatePresence>
              {coinFlip.flipping && (
                <motion.div
                  initial={{ rotateY: 0 }}
                  animate={{ rotateY: 360 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.5, repeat: 3 }}
                  className="w-16 h-16 mx-auto my-4 rounded-full bg-gradient-to-br from-yellow-400 to-yellow-600 flex items-center justify-center text-black font-bold text-xl shadow-lg"
                >
                  {coinFlip.result ? (coinFlip.result === "head" ? "H" : "T") : "?"}
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          {/* Bet Selection */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className={`p-4 rounded-lg ${colors.card} mb-4 shadow-lg`}
          >
            <h2 className="text-lg font-bold mb-3 text-center">CHOOSE YOUR BET</h2>
            
            {/* Choice buttons */}
            <div className="flex gap-3 mb-4">
              <button
                disabled={!roundId || timeLeft <= 5}
                onClick={() => handleChoice("head")}
                className={`flex-1 py-3 rounded-lg font-bold transition-all ${
                  choice === "head" ? colors.activeHead : colors.button
                } ${!roundId || timeLeft <= 5 ? "opacity-50 cursor-not-allowed" : "hover:scale-105"}`}
              >
                HEAD
              </button>
              <button
                disabled={!roundId || timeLeft <= 5}
                onClick={() => handleChoice("tail")}
                className={`flex-1 py-3 rounded-lg font-bold transition-all ${
                  choice === "tail" ? colors.activeTail : colors.button
                } ${!roundId || timeLeft <= 5 ? "opacity-50 cursor-not-allowed" : "hover:scale-105"}`}
              >
                TAIL
              </button>
            </div>

            {/* Bet amount input */}
            <div className="space-y-3">
              <div className="relative">
                <input
                  type="tel"
                  placeholder="Enter bet amount (₹)"
                  value={betAmount || ""}
                  onChange={(e) => setBetAmount(e.target.value ? Number(e.target.value) : 0)}
                  className={`w-full px-4 py-3 rounded-lg ${colors.input} focus:outline-none focus:ring-2 focus:ring-yellow-400 pr-16`}
                />
                <div className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 text-sm">
                  ₹
                </div>
              </div>

              {/* Quick bet buttons */}
              <div className="flex flex-wrap gap-2">
                {quickBets.map((amount) => (
                  <button
                    key={amount}
                    onClick={() => handleQuickBet(amount)}
                    className={`px-3 py-1 text-sm rounded-full ${
                      betAmount === amount ? "bg-yellow-500 text-black" : "bg-gray-700 hover:bg-gray-600"
                    } transition-colors`}
                  >
                    ₹{amount}
                  </button>
                ))}
              </div>

              {/* Place bet button */}
              <button
                ref={betButtonRef}
                onClick={placeBet}
                disabled={!choice || !betAmount || timeLeft <= 5 || !roundId || isUserBeted}
                className={`w-full py-3 rounded-lg font-bold bg-gradient-to-r from-yellow-500 to-yellow-600 hover:from-yellow-400 hover:to-yellow-500 transition-all ${
                  (!choice || !betAmount || timeLeft <= 5 || !roundId || isUserBeted) && "opacity-50 cursor-not-allowed"
                } shadow-md hover:shadow-yellow-500/30 active:scale-95`}
              >
                {isUserBeted ? "BET PLACED" : "PLACE BET"}
              </button>
            </div>
          </motion.div>

          {/* Recent Results */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3 }}
            className={`p-4 rounded-lg ${colors.card} shadow-lg`}
          >
            <h2 className="text-lg font-bold mb-3">RECENT RESULTS</h2>
            {resultHistory.length > 0 ? (
              <div className="flex gap-2 overflow-x-auto pb-2 scrollbar-hide">
                {resultHistory.map((item, index) => (
                  <motion.div
                    key={index}
                    initial={{ scale: 0.8, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    transition={{ delay: index * 0.05 }}
                    className={`flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center ${
                      item.result === "head" ? "bg-blue-600/90" : "bg-amber-600/90"
                    } text-white font-bold shadow-md`}
                  >
                    {item.result.toUpperCase().charAt(0)}
                  </motion.div>
                ))}
              </div>
            ) : (
              <p className="text-gray-400 text-center py-4">No results yet</p>
            )}
          </motion.div>

          {/* User Bet History */}
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className={`p-4 rounded-lg ${colors.card} mt-4 shadow-lg`}
          >
            <div className="flex justify-between items-center mb-3">
              <h2 className="text-lg font-bold">YOUR HISTORY</h2>
              <button 
                onClick={fetchUserHistory}
                className="text-yellow-400 hover:text-yellow-300 transition-colors flex items-center gap-1 text-sm"
              >
                <TfiReload size={14} />
                Refresh
              </button>
            </div>

            {userHistory.length > 0 ? (
              <div className="space-y-2 max-h-60 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-800">
                {userHistory.map((bet) => (
                  <motion.div
                    key={bet._id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    className={`p-3 rounded-lg border ${
                      bet.result === "win" ? colors.win : colors.lose
                    } flex justify-between items-center`}
                  >
                    <div>
                      <p className="font-medium flex items-center gap-2">
                        <span className={`w-3 h-3 rounded-full ${
                          bet.result === "win" ? "bg-green-500" : "bg-red-500"
                        }`}></span>
                        {bet.choice.toUpperCase()} - ₹{bet.amount}
                      </p>
                      <p className="text-xs text-gray-400">
                        {new Date(bet.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </p>
                    </div>
                    <div className="text-right">
                      <p className={bet.result === "win" ? "text-green-400" : "text-red-400"}>
                        {bet.result.toUpperCase()}
                      </p>
                      <p className={`text-sm font-bold ${
                        bet.result === "win" ? "text-green-300" : "text-red-300"
                      }`}>
                        {bet.result === "win" ? `+₹${bet.payout}` : `-₹${bet.amount}`}
                      </p>
                    </div>
                  </motion.div>
                ))}
              </div>
            ) : (
              <p className="text-gray-400 text-center py-4">
                No bet history found
              </p>
            )}
          </motion.div>
        </div>
      </div>
    </>
  );
}